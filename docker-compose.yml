services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173" 
    networks:
      - Biletinyo
    depends_on:
      - backend
    develop:
      watch:
        - action: sync+restart
          path: ./frontend
          target: /app
          ignore:
            - node_modules

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  
    networks:
      - Biletinyo
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USER: user
      DB_PASSWORD: password
    develop:
      watch:
        - action: sync+restart
          path: ./backend
          target: /app
          ignore:
            - bin
            - obj
    
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    command: >
      postgres
      -c max_connections=2000
      -c idle_in_transaction_session_timeout=1min
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - Biletinyo

networks:
  Biletinyo:
volumes:
  pg_data: